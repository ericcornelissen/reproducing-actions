# WARNING:
# When using this reusable workflow, provide only trusted values to the inputs
# `build-cmd`, `install-cmd`, and `files`. The design of this workflow requires
# these to be embedded in scripts, which allows them to be used to execute an
# arbitrary command (in fact, that is exactly what `build-cmd` and `install-cmd`
# do).

name: Check
on:
  workflow_call:
    inputs:
      files:
        required: true
        type: string

      # Setup
      build-cmd:
        required: true
        type: string
      install-cmd:
        required: true
        type: string

      # Node.js
      node-version:
        required: false
        type: string
        default: ""
      node-version-file:
        required: false
        type: string
        default: ""

      # Target
      repository:
        required: true
        type: string
      version-ref:
        required: true
        type: string

permissions: read-all

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      CHECKSUMS_FILE: reproducing-actions-checksums.txt
      BACKUP_DIR: /tmp/reproducing-actions
    steps:
      # Repository setup
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          ref: ${{ inputs.version-ref }}
          repository: ${{ inputs.repository }}

      # Environment setup
      - name: Install Node.js (from version)
        if: ${{ inputs.node-version != '' }}
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ inputs.node-version }}
      - name: Install Node.js (from version file)
        if: ${{ inputs.node-version-file != '' }}
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: ${{ inputs.node-version-file }}
      - name: Install dependencies
        run: ${{ inputs.install-cmd }}

      # Check reproducibility
      - name: Normalize line endings
        run: |
          shopt -s globstar

          for file in ${{ inputs.files }}; do
            echo "Normalizing line endings in '$file'"
            sed -i 's/\r$//' "$file"
          done
      - name: Store original build files
        run: |
          shopt -s globstar

          mkdir --parents "$BACKUP_DIR"
          cp --parents ${{ inputs.files }} "$BACKUP_DIR"
      - name: Compute original checksums (legacy)
        run: |
          shopt -s globstar

          shasum --algorithm 512 ${{ inputs.files }} >$CHECKSUMS_FILE

          echo 'Checksums:'
          echo '----------'
          cat $CHECKSUMS_FILE
      - name: Rebuild
        run: ${{ inputs.build-cmd }}
      - name: Normalize line endings
        run: |
          shopt -s globstar

          for file in ${{ inputs.files }}; do
            echo "Normalizing line endings in '$file'"
            sed -i 's/\r$//' "$file"
          done
      - name: Check build files
        run: |
          shopt -s globstar

          for file in ${{ inputs.files }}; do
            rebuild=$file
            original=$BACKUP_DIR/$file
            echo "Checking '$rebuild' against '$original'"
            cmp "$rebuild" "$original"
          done
      - name: Check checksums (legacy)
        run: shasum --strict --check $CHECKSUMS_FILE
      - name: Build files diff
        if: ${{ failure() }}
        run: |
          shopt -s globstar

          git diff ${{ inputs.files }}
